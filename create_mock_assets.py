#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
モックアセット作成スクリプト

UE5が利用できない環境でもMCPフレームワークのテストができるように、
モックアセット（宝箱、コイン、ポーションなど）のダミーファイルを作成します。

使用方法:
  python create_mock_assets.py
"""

import os
import sys
import json
import logging
import time
import shutil
from pathlib import Path
from dotenv import load_dotenv

# 環境変数のロード
load_dotenv()

# ロギング設定
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("create_mock_assets")

# スクリプトディレクトリ
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
EXPORTS_DIR = os.path.join(SCRIPT_DIR, "exports")
IMPORTS_DIR = os.path.join(SCRIPT_DIR, "imports")
ASSETS_DIR = os.path.join(SCRIPT_DIR, "assets")
TEMP_DIR = os.path.join(SCRIPT_DIR, "temp")

# モックアセットリスト
MOCK_ASSETS = [
    {"name": "TreasureChest", "type": "model", "format": "fbx"},
    {"name": "Coin", "type": "model", "format": "fbx"},
    {"name": "HealthPotion", "type": "model", "format": "fbx"},
    {"name": "TreasureKey", "type": "model", "format": "fbx"},
    {"name": "TreasureMap", "type": "texture", "format": "png"},
    {"name": "GoldMaterial", "type": "material", "format": "json"},
    {"name": "WoodMaterial", "type": "material", "format": "json"},
    {"name": "GlassMaterial", "type": "material", "format": "json"},
]

# ブループリントリスト
MOCK_BLUEPRINTS = [
    {
        "name": "BP_TreasureChest",
        "parent": "Actor",
        "description": "プレイヤーが近づくと開く宝箱。開くとコインや他のアイテムが出現する。"
    },
    {
        "name": "BP_Coin",
        "parent": "Actor",
        "description": "プレイヤーが収集するとスコアが増えるコイン。回転しながら上下に浮遊する。"
    },
    {
        "name": "BP_HealthPotion",
        "parent": "Actor",
        "description": "プレイヤーが収集するとヘルスが回復するポーション。回転して光る効果がある。"
    },
    {
        "name": "BP_TreasureHuntGameMode",
        "parent": "GameModeBase",
        "description": "プレイヤーのスコアとヘルスを管理し、すべての宝箱を見つけるとゲームクリアになるゲームモード。"
    },
    {
        "name": "BP_TreasureHunter",
        "parent": "Character",
        "description": "プレイヤーキャラクター。アイテム収集機能とインベントリシステムを持つ。"
    },
    {
        "name": "BP_TreasureHuntHUD",
        "parent": "HUD",
        "description": "プレイヤーのスコア、ヘルス、見つけた宝箱の数を表示するHUD。"
    }
]

def create_dummy_file(directory, filename, content=None):
    """ダミーファイルを作成"""
    full_path = os.path.join(directory, filename)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    
    try:
        with open(full_path, "w", encoding="utf-8") as f:
            if content:
                f.write(content)
            else:
                # デフォルトコンテンツ
                f.write(f"# Mock asset: {filename}\n")
                f.write(f"# Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("# This is a mock file for testing purposes\n")
        
        logger.info(f"ダミーファイル作成: {full_path}")
        return True
    except Exception as e:
        logger.error(f"ファイル作成エラー {full_path}: {str(e)}")
        return False

def create_mock_3d_asset(asset_name, asset_format="fbx"):
    """3Dアセットのモックファイルを作成"""
    filename = f"{asset_name}.{asset_format}"
    export_path = os.path.join(EXPORTS_DIR, filename)
    
    # ダミーデータ生成
    mock_data = f"""
# MOCK {asset_format.upper()} FILE
# Asset Name: {asset_name}
# Created: {time.strftime('%Y-%m-%d %H:%M:%S')}
#
# This is a mock file for testing purposes.
# In a real environment, this would be a binary {asset_format.upper()} file.
#
# Properties:
# - Name: {asset_name}
# - Polygons: 1024
# - Vertices: 2048
# - Materials: 1
# - UV Sets: 1
#
# Generated by MCP Framework Mock Asset Generator
"""
    
    return create_dummy_file(EXPORTS_DIR, filename, mock_data)

def create_mock_texture(texture_name, format="png"):
    """テクスチャのモックファイルを作成"""
    filename = f"{texture_name}.{format}"
    export_path = os.path.join(ASSETS_DIR, "textures", filename)
    
    # ダミーデータ生成
    mock_data = f"""
# MOCK {format.upper()} FILE
# Texture Name: {texture_name}
# Created: {time.strftime('%Y-%m-%d %H:%M:%S')}
#
# This is a mock file for testing purposes.
# In a real environment, this would be a binary {format.upper()} image file.
#
# Properties:
# - Resolution: 2048x2048
# - Channels: RGBA
# - Compression: None
#
# Generated by MCP Framework Mock Asset Generator
"""
    
    return create_dummy_file(ASSETS_DIR, f"textures/{filename}", mock_data)

def create_mock_material(material_name):
    """マテリアルのモックファイルを作成（JSON形式）"""
    filename = f"{material_name}.json"
    
    # マテリアルプロパティ生成
    material_data = {
        "name": material_name,
        "type": "PBR",
        "properties": {
            "baseColor": [0.8, 0.8, 0.8],
            "metallic": 0.0,
            "roughness": 0.5,
            "specular": 0.5,
            "emissive": [0.0, 0.0, 0.0],
            "opacity": 1.0
        },
        "textures": {
            "diffuse": f"{material_name}_diffuse.png",
            "normal": f"{material_name}_normal.png",
            "roughness": f"{material_name}_roughness.png",
            "metallic": f"{material_name}_metallic.png"
        },
        "created": time.strftime('%Y-%m-%d %H:%M:%S'),
        "isMock": True
    }
    
    # 特定のマテリアル用にカスタマイズ
    if "Gold" in material_name:
        material_data["properties"]["baseColor"] = [0.83, 0.68, 0.21]
        material_data["properties"]["metallic"] = 0.9
        material_data["properties"]["roughness"] = 0.1
    elif "Wood" in material_name:
        material_data["properties"]["baseColor"] = [0.59, 0.39, 0.22]
        material_data["properties"]["metallic"] = 0.0
        material_data["properties"]["roughness"] = 0.8
    elif "Glass" in material_name:
        material_data["properties"]["baseColor"] = [0.9, 0.9, 0.95]
        material_data["properties"]["metallic"] = 0.0
        material_data["properties"]["roughness"] = 0.05
        material_data["properties"]["opacity"] = 0.3
    
    return create_dummy_file(ASSETS_DIR, f"materials/{filename}", json.dumps(material_data, indent=2))

def create_mock_blueprint(blueprint_info):
    """ブループリントのモックファイルを作成"""
    blueprint_name = blueprint_info["name"]
    parent_class = blueprint_info["parent"]
    description = blueprint_info["description"]
    
    filename = f"{blueprint_name}.json"
    
    # ブループリントデータ生成
    blueprint_data = {
        "name": blueprint_name,
        "parentClass": parent_class,
        "description": description,
        "components": [],
        "variables": [],
        "functions": [],
        "events": [],
        "created": time.strftime('%Y-%m-%d %H:%M:%S'),
        "isMock": True
    }
    
    # 特定のブループリント用にカスタマイズ
    if "TreasureChest" in blueprint_name:
        blueprint_data["components"].append({
            "name": "StaticMeshComponent",
            "mesh": "TreasureChest.fbx",
            "material": "WoodMaterial"
        })
        blueprint_data["variables"].append({
            "name": "bIsOpen",
            "type": "Boolean",
            "defaultValue": False
        })
        blueprint_data["functions"].append({
            "name": "OpenChest",
            "description": "宝箱を開き、アイテムを生成する"
        })
    elif "Coin" in blueprint_name:
        blueprint_data["components"].append({
            "name": "StaticMeshComponent",
            "mesh": "Coin.fbx",
            "material": "GoldMaterial"
        })
        blueprint_data["variables"].append({
            "name": "Value",
            "type": "Integer",
            "defaultValue": 10
        })
    elif "HealthPotion" in blueprint_name:
        blueprint_data["components"].append({
            "name": "StaticMeshComponent",
            "mesh": "HealthPotion.fbx",
            "material": "GlassMaterial"
        })
        blueprint_data["variables"].append({
            "name": "HealAmount",
            "type": "Float",
            "defaultValue": 25.0
        })
    
    return create_dummy_file(ASSETS_DIR, f"blueprints/{filename}", json.dumps(blueprint_data, indent=2))

def create_mock_level():
    """モックレベルデータを作成"""
    level_name = "TreasureHuntMap"
    filename = f"{level_name}.json"
    
    # レベルデータ生成
    level_data = {
        "name": level_name,
        "description": "トレジャーハントゲームのメインレベル",
        "skybox": "BlueSky",
        "terrainSize": [2000, 2000],
        "actors": [
            {
                "blueprint": "BP_TreasureChest",
                "location": [100, 200, 0],
                "rotation": [0, 0, 45],
                "scale": [1, 1, 1],
                "properties": {"bIsOpen": False}
            },
            {
                "blueprint": "BP_TreasureChest",
                "location": [-200, 300, 0],
                "rotation": [0, 0, 0],
                "scale": [1, 1, 1],
                "properties": {"bIsOpen": False}
            },
            {
                "blueprint": "BP_TreasureChest",
                "location": [300, -150, 0],
                "rotation": [0, 0, 90],
                "scale": [1, 1, 1],
                "properties": {"bIsOpen": False}
            },
            {
                "blueprint": "BP_Coin",
                "location": [50, 50, 50],
                "rotation": [0, 0, 0],
                "scale": [1, 1, 1],
                "properties": {"Value": 15}
            },
            {
                "blueprint": "BP_Coin",
                "location": [150, 50, 50],
                "rotation": [0, 0, 0],
                "scale": [1, 1, 1],
                "properties": {"Value": 15}
            },
            {
                "blueprint": "BP_HealthPotion",
                "location": [-50, 100, 50],
                "rotation": [0, 0, 0],
                "scale": [1, 1, 1],
                "properties": {"HealAmount": 30.0}
            }
        ],
        "gameMode": "BP_TreasureHuntGameMode",
        "playerStart": [0, 0, 100],
        "created": time.strftime('%Y-%m-%d %H:%M:%S'),
        "isMock": True
    }
    
    return create_dummy_file(ASSETS_DIR, f"levels/{filename}", json.dumps(level_data, indent=2))

def main():
    """メイン実行関数"""
    logger.info("===== モックアセット作成を開始します =====")
    
    # 必要なディレクトリの作成
    os.makedirs(EXPORTS_DIR, exist_ok=True)
    os.makedirs(IMPORTS_DIR, exist_ok=True)
    os.makedirs(os.path.join(ASSETS_DIR, "textures"), exist_ok=True)
    os.makedirs(os.path.join(ASSETS_DIR, "materials"), exist_ok=True)
    os.makedirs(os.path.join(ASSETS_DIR, "blueprints"), exist_ok=True)
    os.makedirs(os.path.join(ASSETS_DIR, "levels"), exist_ok=True)
    os.makedirs(TEMP_DIR, exist_ok=True)
    
    # 3Dモックアセットの作成
    logger.info("3Dモックアセットを作成しています...")
    for asset in MOCK_ASSETS:
        if asset["type"] == "model":
            create_mock_3d_asset(asset["name"], asset["format"])
        elif asset["type"] == "texture":
            create_mock_texture(asset["name"], asset["format"])
        elif asset["type"] == "material":
            create_mock_material(asset["name"])
    
    # ブループリントの作成
    logger.info("モックブループリントを作成しています...")
    for blueprint in MOCK_BLUEPRINTS:
        create_mock_blueprint(blueprint)
    
    # レベルの作成
    logger.info("モックレベルを作成しています...")
    create_mock_level()
    
    logger.info("===== モックアセット作成が完了しました =====")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 
